{"remainingRequest":"/Users/asupreyaporn/Downloads/vue-barcode-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/asupreyaporn/Downloads/vue-barcode-master/src/views/GlobalDate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/asupreyaporn/Downloads/vue-barcode-master/src/views/GlobalDate.vue","mtime":1557043206000},{"path":"/Users/asupreyaporn/Downloads/vue-barcode-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/asupreyaporn/Downloads/vue-barcode-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/asupreyaporn/Downloads/vue-barcode-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/asupreyaporn/Downloads/vue-barcode-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"GlobalDate\",\n  props: {\n    value: 0,\n    label: {\n      default: \"\"\n    },\n    disabled: {\n      default: false\n    },\n    readonly: {\n      default: false\n    }\n  },\n  data() {\n    return {\n      date: null,\n      dateFormat: null,\n      menu: false,\n    };\n  },\n  created() {\n    this.setDate();\n  },\n  computed: {\n    setDisabled: {\n      get: function() {\n        return this.disabled;\n      },\n      set: function() {}\n    },\n    setReadonly: {\n      get: function() {\n        return this.readonly;\n      },\n      set: function() {}\n    },\n    dateText: {\n      get: function() {\n        return this.dateFormat;\n      },\n      set: function(newVal) {\n        if (newVal) {\n          this.dateFormat = newVal;\n          this.date = this.parseDate(this.dateFormat);\n          this.$emit(\"update:value\", this.formatToYYYYMMDD(this.dateFormat));\n        } else {\n          this.dateFormat = null;\n          this.date = null;\n          this.$emit(\"update:value\", 0);\n        }\n      }\n    },\n    dateCalendar: {\n      get: function() {\n        return this.date;\n      },\n      set: function(newVal) {\n        this.menu = false;\n        this.date = newVal;\n        this.dateFormat = this.formatDate(this.date);\n        this.$emit(\"update:value\", this.formatToYYYYMMDD(this.dateFormat));\n      }\n    }\n  },\n  watch: {\n    value: function(newVal, oldVal) {\n      if (newVal) {\n        if (newVal && this.dateFormat == null) {\n          this.dateText = this.formatToDDMMYYYY(newVal);\n        } else if (this.dateFormat.length == 8) {\n          this.dateText = this.formatToDDMMYYYY(newVal);\n        }\n      } else {\n        this.dateText = null;\n      }\n    }\n  },\n  methods: {\n    setDate() {\n      if (this.value == 0) return;\n      this.date = this.value.toString();\n      this.dateText = this.formatToDDMMYYYY(this.date);\n    },\n    formatDate(date) {\n      if (!date) return null;\n\n      let [year, month, day] = date.split(\"-\");\n\n      return `${day ? day.padStart(2, \"0\") : \"00\"}${\n        month ? month.padStart(2, \"0\") : \"00\"\n      }${String(Number(year) + 543).padStart(4, \"0\")}`;\n    },\n    parseDate(date) {\n      if (!date) return;\n      if (date.length != 8) return;\n\n      let [day, month, year] = [\n        date.substring(0, 2),\n        date.substring(2, 4),\n        Number(date.substring(4))\n      ];\n\n      let dates = \"\";\n      let [y, m, d] = this.getDayMonthYearForZeroPad(day, month, year);\n      dates = `${y}-${m}-${d}`;\n\n      return dates;\n    },\n    formatToDDMMYYYY(date) {\n      let data = `${date.toString().padEnd(8, \"0\")}`;\n      // let data = date\n      let [year, month, day] = [\n        data.substring(0, 4),\n        data.substring(4, 6),\n        data.substring(6)\n      ];\n\n      return `${day}${month}${year}`;\n    },\n    formatToYYYYMMDD(date) {\n      let data = `${date.toString().padEnd(8, \"0\")}`;\n\n      let [year, month, day] = [\n        data.substring(4),\n        data.substring(2, 4),\n        data.substring(0, 2)\n      ];\n      return `${year}${month}${day}`;\n    },\n    getDayMonthYearForZeroPad(day, month, year) {\n      let y = String(Math.abs(year - 543)).padStart(4, \"0\");\n      let m = Number(month) ? `${month.padStart(2, \"0\")}` : \"00\";\n      let d = Number(day) ? `${day.padStart(2, \"0\")}` : \"00\";\n      return [y, m, d];\n    }\n  }\n};\n",{"version":3,"sources":["GlobalDate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"GlobalDate.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-layout row>\n    <v-flex\n      pa-0\n      xs12\n      d-inline-flex\n    >\n      <v-flex xs11>\n        <v-text-field\n          prepend-icon=\" \"\n          v-model='dateText'\n          :label='label'\n          mask='##/##/####'\n          placeholder=' '\n          persistent-hint\n          :readonly='setReadonly'\n          :disabled='setDisabled'\n          :class='{\"text-no-border\" : setDisabled}'\n        />\n      </v-flex>\n      <v-flex\n        xs1\n        pt-2\n        pr-4\n      >\n        <v-menu\n          ref='menu'\n          :close-on-content-click='false'\n          v-model='menu'\n          lazy\n          transition='scale-transition'\n          offset-y\n          full-width\n          :disabled=\"setReadonly\"\n        >\n          <v-icon\n            slot='activator'\n            ref='icon'\n            style=\"margin-top:10px\"\n            color=\"blue\"\n          >mdi-calendar-clock</v-icon>\n          <v-date-picker\n            color=\"blue\"\n            header-color='blue'\n            v-model='dateCalendar'\n            locale='th'\n            :readonly='setReadonly'\n          ></v-date-picker>\n        </v-menu>\n      </v-flex>\n    </v-flex>\n  </v-layout>\n</template>\n\n<script>\nexport default {\n  name: \"GlobalDate\",\n  props: {\n    value: 0,\n    label: {\n      default: \"\"\n    },\n    disabled: {\n      default: false\n    },\n    readonly: {\n      default: false\n    }\n  },\n  data() {\n    return {\n      date: null,\n      dateFormat: null,\n      menu: false,\n    };\n  },\n  created() {\n    this.setDate();\n  },\n  computed: {\n    setDisabled: {\n      get: function() {\n        return this.disabled;\n      },\n      set: function() {}\n    },\n    setReadonly: {\n      get: function() {\n        return this.readonly;\n      },\n      set: function() {}\n    },\n    dateText: {\n      get: function() {\n        return this.dateFormat;\n      },\n      set: function(newVal) {\n        if (newVal) {\n          this.dateFormat = newVal;\n          this.date = this.parseDate(this.dateFormat);\n          this.$emit(\"update:value\", this.formatToYYYYMMDD(this.dateFormat));\n        } else {\n          this.dateFormat = null;\n          this.date = null;\n          this.$emit(\"update:value\", 0);\n        }\n      }\n    },\n    dateCalendar: {\n      get: function() {\n        return this.date;\n      },\n      set: function(newVal) {\n        this.menu = false;\n        this.date = newVal;\n        this.dateFormat = this.formatDate(this.date);\n        this.$emit(\"update:value\", this.formatToYYYYMMDD(this.dateFormat));\n      }\n    }\n  },\n  watch: {\n    value: function(newVal, oldVal) {\n      if (newVal) {\n        if (newVal && this.dateFormat == null) {\n          this.dateText = this.formatToDDMMYYYY(newVal);\n        } else if (this.dateFormat.length == 8) {\n          this.dateText = this.formatToDDMMYYYY(newVal);\n        }\n      } else {\n        this.dateText = null;\n      }\n    }\n  },\n  methods: {\n    setDate() {\n      if (this.value == 0) return;\n      this.date = this.value.toString();\n      this.dateText = this.formatToDDMMYYYY(this.date);\n    },\n    formatDate(date) {\n      if (!date) return null;\n\n      let [year, month, day] = date.split(\"-\");\n\n      return `${day ? day.padStart(2, \"0\") : \"00\"}${\n        month ? month.padStart(2, \"0\") : \"00\"\n      }${String(Number(year) + 543).padStart(4, \"0\")}`;\n    },\n    parseDate(date) {\n      if (!date) return;\n      if (date.length != 8) return;\n\n      let [day, month, year] = [\n        date.substring(0, 2),\n        date.substring(2, 4),\n        Number(date.substring(4))\n      ];\n\n      let dates = \"\";\n      let [y, m, d] = this.getDayMonthYearForZeroPad(day, month, year);\n      dates = `${y}-${m}-${d}`;\n\n      return dates;\n    },\n    formatToDDMMYYYY(date) {\n      let data = `${date.toString().padEnd(8, \"0\")}`;\n      // let data = date\n      let [year, month, day] = [\n        data.substring(0, 4),\n        data.substring(4, 6),\n        data.substring(6)\n      ];\n\n      return `${day}${month}${year}`;\n    },\n    formatToYYYYMMDD(date) {\n      let data = `${date.toString().padEnd(8, \"0\")}`;\n\n      let [year, month, day] = [\n        data.substring(4),\n        data.substring(2, 4),\n        data.substring(0, 2)\n      ];\n      return `${year}${month}${day}`;\n    },\n    getDayMonthYearForZeroPad(day, month, year) {\n      let y = String(Math.abs(year - 543)).padStart(4, \"0\");\n      let m = Number(month) ? `${month.padStart(2, \"0\")}` : \"00\";\n      let d = Number(day) ? `${day.padStart(2, \"0\")}` : \"00\";\n      return [y, m, d];\n    }\n  }\n};\n</script>\n\n<style>\n.v-date-picker-table {\n  height: auto;\n}\n</style>\n\n<style scoped>\n.text-no-border >>> .v-input__slot:before,\n.text-no-border >>> .v-input__slot:after,\n.text-no-border >>> input {\n  border-style: none;\n  margin-bottom: 0px;\n}\n\n.theme--light >>> table tbody tr:hover:not(.v-datatable__expand-row),\n.theme--light >>> table tbody tr[active] {\n  background-color: #ffffff !important;\n}\n</style>\n"]}]}